<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Facilities.AspNetCore</name>
    </assembly>
    <members>
        <member name="M:Castle.Facilities.AspNetCore.AspNetCoreFacility.CrossWiresInto(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Installation of the <see cref="T:Castle.Facilities.AspNetCore.Contributors.CrossWiringComponentModelContributor"/> for registering components in both the <see cref="T:Castle.Windsor.IWindsorContainer"/> and the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> via the <see cref="M:Castle.Facilities.AspNetCore.WindsorRegistrationExtensions.CrossWired(Castle.MicroKernel.Registration.ComponentRegistration)"/> component registration extension
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
        </member>
        <member name="M:Castle.Facilities.AspNetCore.AspNetCoreFacility.RegistersMiddlewareInto(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Registers Windsor `aware` <see cref="T:Microsoft.AspNetCore.Http.IMiddleware"/> into the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> via the <see cref="M:Castle.Facilities.AspNetCore.WindsorRegistrationExtensions.AsMiddleware(Castle.MicroKernel.Registration.ComponentRegistration)"/> component registration extension
            </summary>
            <param name="applicationBuilder"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
        </member>
        <member name="M:Castle.Facilities.AspNetCore.WindsorContainerExtensions.GetFacility``1(Castle.Windsor.IWindsorContainer)">
            <summary>
            For grabbing a hold of the <see cref="T:Castle.Facilities.AspNetCore.AspNetCoreFacility"/> during middleware registration from the Configure(IApplicationBuilder, IHostingEnvironment, ILoggerFactory) method in Startup. 
            </summary>
            <typeparam name="T">The <see cref="T:Castle.MicroKernel.IFacility"/> implementation</typeparam>
            <param name="container">A reference to <see cref="T:Castle.Windsor.IWindsorContainer"/></param>
            <returns>An implementation of <see cref="T:Castle.MicroKernel.IFacility"/></returns>
        </member>
        <member name="M:Castle.Facilities.AspNetCore.WindsorRegistrationExtensions.AddWindsor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Castle.Windsor.IWindsorContainer,System.Action{Castle.Facilities.AspNetCore.WindsorRegistrationOptions},System.Func{System.IServiceProvider})">
            <summary>
            Sets up framework level activators for Controllers, TagHelpers and ViewComponents and adds additional sub dependency resolvers
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="container"><see cref="T:Castle.Windsor.IWindsorContainer"/></param>
            <param name="configure">Configuration options for controlling registration and lifestyles of controllers, tagHelpers and viewComponents</param>
            <param name="serviceProviderFactory">Optional factory for creating a custom <see cref="T:System.IServiceProvider"/></param>
        </member>
        <member name="M:Castle.Facilities.AspNetCore.WindsorRegistrationExtensions.CrossWired(Castle.MicroKernel.Registration.ComponentRegistration)">
            <summary>
            For making types available to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> using 'late bound' factories which resolve from Windsor. This makes things like the @Inject directive in Razor work.
            </summary>
            <param name="registration">The component registration that gets copied across to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
        </member>
        <member name="M:Castle.Facilities.AspNetCore.WindsorRegistrationExtensions.CrossWired``1(Castle.MicroKernel.Registration.ComponentRegistration{``0})">
            <summary>
            For making types available to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> using 'late bound' factories which resolve from Windsor. This makes things like the @Inject directive in Razor work.
            </summary>
            <param name="registration">The component registration that gets copied across to the IServiceCollection</param>
        </member>
        <member name="M:Castle.Facilities.AspNetCore.WindsorRegistrationExtensions.AsMiddleware(Castle.MicroKernel.Registration.ComponentRegistration)">
            <summary>
            For registering middleware that is resolved from Windsor
            </summary>
            <param name="registration"><see cref="T:Castle.MicroKernel.Registration.ComponentRegistration"/></param>
            <returns><see cref="T:Castle.MicroKernel.Registration.ComponentRegistration"/></returns>
        </member>
        <member name="M:Castle.Facilities.AspNetCore.WindsorRegistrationExtensions.AsMiddleware``1(Castle.MicroKernel.Registration.ComponentRegistration{``0})">
            <summary>
            For registering middleware that is resolved from Windsor
            </summary>
            <typeparam name="T">A generic type that implements <see cref="T:Microsoft.AspNetCore.Http.IMiddleware"/></typeparam>
            <param name="registration"><see cref="T:Castle.MicroKernel.Registration.ComponentRegistration`1"/></param>
            <returns><see cref="T:Castle.MicroKernel.Registration.ComponentRegistration`1"/></returns>
        </member>
        <member name="T:Castle.Facilities.AspNetCore.WindsorRegistrationOptions">
            <summary>
            For overriding default registration and lifestyles behaviour
            </summary>
        </member>
        <member name="M:Castle.Facilities.AspNetCore.WindsorRegistrationOptions.UseEntryAssembly(System.Reflection.Assembly)">
            <summary>
            Use this method to specify where controllers, tagHelpers and viewComponents are registered from. Use this method
            if the facility starts throwing ComponentNotFoundExceptions because of problems with <see cref="M:System.Reflection.Assembly.GetCallingAssembly"/>/<see cref="M:System.Reflection.Assembly.GetEntryAssembly"/>.
            You can optionally use <see cref="M:Castle.Facilities.AspNetCore.WindsorRegistrationOptions.RegisterControllers(System.Reflection.Assembly,Castle.Core.LifestyleType)"/>/<see cref="M:Castle.Facilities.AspNetCore.WindsorRegistrationOptions.RegisterTagHelpers(System.Reflection.Assembly,Castle.Core.LifestyleType)"/>/<see cref="M:Castle.Facilities.AspNetCore.WindsorRegistrationOptions.RegisterViewComponents(System.Reflection.Assembly,Castle.Core.LifestyleType)"/> if you need more fine grained
            control for sourcing these framework components.
            </summary>
            <param name="entryAssembly"></param>
            <returns><see cref="T:Castle.Facilities.AspNetCore.WindsorRegistrationOptions"/></returns>
        </member>
        <member name="M:Castle.Facilities.AspNetCore.WindsorRegistrationOptions.RegisterControllers(System.Reflection.Assembly,Castle.Core.LifestyleType)">
            <summary>
            Use this method to customise the registration/lifestyle of controllers.
            </summary>
            <param name="controllersAssembly">Assembly where the controllers are defined. Defaults to <see cref="M:System.Reflection.Assembly.GetCallingAssembly"/>.</param>
            <param name="lifestyleType">The lifestyle of the controllers. Defaults to <see cref="F:Castle.Core.LifestyleType.Scoped"/>.</param>
            <returns><see cref="T:Castle.Facilities.AspNetCore.WindsorRegistrationOptions"/> as a fluent interface</returns>
        </member>
        <member name="M:Castle.Facilities.AspNetCore.WindsorRegistrationOptions.RegisterTagHelpers(System.Reflection.Assembly,Castle.Core.LifestyleType)">
            <summary>
            Use this method to customise the registration/lifestyle of tagHelpers.
            </summary>
            <param name="tagHelpersAssembly">Assembly where the tag helpers are defined. Defaults to Assembly.GetCallingAssembly().</param>
            <param name="lifestyleType">The lifestyle of the controllers. Defaults to <see cref="F:Castle.Core.LifestyleType.Scoped"/>.</param>
            <returns><see cref="T:Castle.Facilities.AspNetCore.WindsorRegistrationOptions"/> as a fluent interface</returns>
        </member>
        <member name="M:Castle.Facilities.AspNetCore.WindsorRegistrationOptions.RegisterViewComponents(System.Reflection.Assembly,Castle.Core.LifestyleType)">
            <summary>
            Use this method to customise the registration/lifestyle of view components.
            </summary>
            <param name="viewComponentsAssembly">Assembly where the view components are defined. Defaults to Assembly.GetCallingAssembly().</param>
            <param name="lifestyleType">The lifestyle of the controllers. Defaults to <see cref="F:Castle.Core.LifestyleType.Scoped"/>.</param>
            <returns><see cref="T:Castle.Facilities.AspNetCore.WindsorRegistrationOptions"/> as a fluent interface</returns>
        </member>
    </members>
</doc>
